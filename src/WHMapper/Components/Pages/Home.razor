@page "/"

<AuthorizeView>
    <Authorizing>
        <MudText class="py-1" Typo="Typo.body2">"Authorization in progress,please wait ...")
            <MudProgressCircular Color="Color.Secondary" Size="MudBlazor.Size.Small" />
        </MudText>
    </Authorizing>
    <Authorized>
        <WHMapper.Components.Pages.Mapper.Overview/>
    </Authorized>
    <NotAuthorized>
        @if(_loading)
        {
            <MudPaper Class="d-flex align-center justify-center" Height="calc(100vh - var(--mud-appbar-height) + var(--mud-appbar-height)/4);" Width="100%">
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Initialization</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Align="Align.Center">EVE Wormhole mapper is downloading a new SDE package.</MudText>
                        <MudText class="py-1" Typo="Typo.body2">@String.Format("{0}, please wait ...",_init_process_msg)
                            <MudProgressCircular Color="Color.Secondary" Indeterminate="@_loading" Size="MudBlazor.Size.Small" />
                        </MudText>                 
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        }
        else
        {

            <div class="d-flex align-center justify-center position-relative" style="height: calc(100vh - var(--mud-appbar-height) + var(--mud-appbar-height)/4); width: 100%;">
                 <MudStack Class="d-flex flex-none position-absolute" Row="false" Spacing="5" Style="top: 25px;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h4" Align="Align.Center">EVE WHMapper</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">Map wormholes, track chains, and keep your corp connected.</MudText>
                 </MudStack>
                <MudImage Class="d-flex flex-1" Src="Images/splashscreen.png" ObjectFit="ObjectFit.Contain" Style="max-width: 100%; max-height: 100%;"/>
                <MudStack Class="d-flex flex-none position-absolute" Row="true" Spacing="2" Style="bottom: 25px;" Justify="Justify.SpaceBetween">
                    <MudTooltip Text="Documentation" Placement="Placement.Top">
                        <MudIconButton Icon="@Icons.Material.Filled.HelpOutline" Size="Size.Medium" Color="Color.Default" Href="https://pfh59.github.io/eve-whmapper-docs/" Target="_blank"/>
                    </MudTooltip>
                    <MudTooltip Text="Forum" Placement="Placement.Top">
                        <MudIconButton Icon="@Icons.Material.Filled.Forum" Size="Size.Medium" Color="Color.Default" Href="https://forums.eveonline.com/t/whmapper/421061" Target="_blank" />
                    </MudTooltip>
                    <MudTooltip Text="GitHub Repository" Placement="Placement.Top">
                        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Size="Size.Medium" Color="Color.Default" Href="https://github.com/pfh59/eve-whmapper" Target="_blank" />
                    </MudTooltip>
                </MudStack>
            </div>


        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _loading = true;
    private string _init_process_msg = string.Empty;


    [Inject]
    private ISnackbar Snackbar {get;set;} =null!;

    [Inject]
    private Services.SDE.ISDEServiceManager SDEServices {get;set;} =null!;


    protected override async Task OnInitializedAsync()
    {
        if(SDEServices.IsExtractionSuccesful())
        {
            _loading = false;
        }


        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if(!SDEServices.IsExtractionSuccesful())
            {
                await DownloadExtractImportSDE();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task SetProcessMessage(string message)
    {
        await InvokeAsync(() => {
            _init_process_msg = message;
            StateHasChanged();
        });
    }

    private async Task SetLoading(bool loading)
    {
        await InvokeAsync(() => {
            _loading = loading;
            StateHasChanged();
        });
    }

    private async Task Cleaning()
    {
        await SetProcessMessage("Cleaning ... ");
        await SDEServices.ClearCache();
    }

    private async Task DownloadExtractImportSDE()
    {
       if(await SDEServices.IsNewSDEAvailable())
       {
            await SetProcessMessage("Removing current SDE package (1/4)");
            if (!await SDEServices.ClearSDEResources())
            {
                Snackbar.Add("Removing current SDE package failed", Severity.Error);
                await Cleaning();
                return;
            }

            await SetProcessMessage("Download SDE package (2/4)");
            if(!await SDEServices.DownloadSDE())
            {
                Snackbar.Add("Download SDE package failed.", Severity.Error);
                await Cleaning();
                return;
            }
            
            await SetProcessMessage("Extract SDE package (3/4)");
            if(!await SDEServices.ExtractSDE())
            {
                Snackbar.Add("Extract SDE package failed.", Severity.Error);
                await Cleaning();
                return;
            }

            await SetProcessMessage("Initialize SDE cache (4/4)");
            if(!await SDEServices.BuildCache())
            {
                Snackbar.Add("Initialize SDE cache failed.", Severity.Error);
                await Cleaning();
                return;
            }
        }
        await SetLoading(false);    
    }

}
