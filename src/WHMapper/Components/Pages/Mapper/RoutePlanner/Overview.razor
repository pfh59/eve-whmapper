@using System.Diagnostics
@using WHMapper.Models.DTO.EveAPI.Route.Enums;


<MudPaper Class="d-flex flex-column pa-2" hidden="@(CurrentSystemNode == null)" Outlined="true" MinWidth="300px" Height="325px">
    <MudRadioGroup Class="flex-none d-flex" @bind-Value="SelectedRoutePlannerTab">
        <MudRadio Class="ma-0"  Value="0" Color="Color.Primary" Size="Size.Small">Custom</MudRadio>
        <MudRadio Class="ma-0"  Value="1" Color="Color.Secondary" Size="Size.Small">Thera</MudRadio>
        <MudRadio Class="ma-0"  Value="2" Color="Color.Dark" Size="Size.Small">Turnur</MudRadio>
    </MudRadioGroup>
    <MudDivider DividerType="DividerType.Middle" Class="my-1"/>
    <MudRadioGroup Class="flex-none d-flex" @bind-Value="RType">
        <MudRadio Class="ma-0" T="RouteType" Value="RouteType.Secure" Color="Color.Success" Size="Size.Small">Safer</MudRadio>
        <MudRadio Class="ma-0" T="RouteType" Value="RouteType.Shortest"  Color="Color.Warning" Size="Size.Small">Shorter</MudRadio>
        <!--<MudRadio Class="ma-0" T="RouteType" Value="RouteType.Insecure"  Color="Color.Error" Size="Size.Small">Riskly</MudRadio>-->
    </MudRadioGroup>
    <MudDivider DividerType="DividerType.Middle" Class="my-1"/>
    @if(_selectedRoutePlannerTab==0)
    {
        <MudStack Class="flex-none d-flex" Row="true" Justify="Justify.FlexStart" Spacing="1" >
            <AuthorizeView Policy="Admin" Context="adminContext">
                <Authorized>
                    <MudText Class="pointer-events-none" Typo="Typo.subtitle1">Route :</MudText>
                    <MudTooltip Text="Add a global new route">
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Info" Size="Size.Small" OnClick="@((e) => AddRoute(true))" Disabled="@(_isEditable || _loading)"/>
                    </MudTooltip>
                    <MudTooltip Text="Add my new route">
                        <MudIconButton Icon="@Icons.Material.Filled.Add"  Color="Color.Info" Size="Size.Small" OnClick="@((e) => AddRoute(false))" Disabled="@(_isEditable || _loading)"/>
                    </MudTooltip>
                    <MudTooltip Text="Edit a route">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" OnClick="@((e) => Edit())" Disabled="@(_loading)"/>
                    </MudTooltip>
                    </Authorized>
                <NotAuthorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Add"  Color="Color.Info" Size="Size.Small" OnClick="@((e) => AddRoute(false))" Disabled="@(_isEditable || _loading)"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" OnClick="@((e) => Edit())" Disabled="@(((_myRoutes!=null && _myRoutes.Count()>0) || _loading) ? false : true)"/>
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>

    }
    else
    {
        <MudText Class="pointer-events-none" Typo="Typo.subtitle1">Route :</MudText>
    }

    @if(_loading)
    {
        <MudPaper Class="flex-1 d-flex align-center align-content-center justify-center" Width="100%" Height="100%">
            <MudProgressCircular  Color="Color.Secondary" Indeterminate="@_loading" Size="MudBlazor.Size.Medium" />
        </MudPaper>
    }
    else
    {
        <MudPaper Class="flex-1 d-flex flex-column flex-column overflow-auto pt-1" Width="100%" Elevation="0">
        @if(_selectedRoutePlannerTab==0)
        {
            @if(_globalRoutes!=null && _globalRoutes.Count() > 0)
            {      
                @foreach (var route in _globalRoutes)
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                        <MudStack Row="true" Spacing="1">
                            <MudText Class="pointer-events-none" Typo="Typo.body2">@route.DestinationName</MudText>
                            <MudChip T="int" Class="mt-n1" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error )" Size="Size.Small">@route.JumpLength</MudChip> 
                        </MudStack>
                        <MudIconButton Class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>
                        <AuthorizeView Policy="Admin" Context="adminContext">
                        @if(_isEditable)
                        {
                            <MudIconButton Class="mt-n1" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@((e) => DelRoute(route))"/>
                        }  
                        </AuthorizeView>
                    </MudStack>
                }
            }

            @if(_myRoutes!=null && _myRoutes.Count() > 0)
            {
                @foreach (var route in _myRoutes)
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                        <MudStack Row="true" Spacing="1">
                            <MudText Typo="Typo.body2">@route.DestinationName</MudText>
                            <MudChip T="int" Class="mt-n1" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error )" Size="Size.Small">@route.JumpLength</MudChip> 
                        </MudStack>
                        <MudIconButton Class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>
                        @if(_isEditable)
                        {
                            <MudIconButton Class="mt-n1" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@((e) => DelRoute(route))"/>
                        }           
                    </MudStack>
                }
            }
        }
        else if(_selectedRoutePlannerTab==1)
        {
            @if(_theraRoutes!=null && _theraRoutes.Count() > 0)
            {
                @foreach (var route in _theraRoutes)
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                        <MudStack Row="true" Spacing="1">
                            <MudText Typo="Typo.body2">@route.DestinationName</MudText>
                            <MudChip T="int" Class="mt-n1" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error )" Size="Size.Small">@route.JumpLength</MudChip> 
                        </MudStack>
                        <MudIconButton Class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>       
                    </MudStack>
                }
            }
        }
        else if(_selectedRoutePlannerTab==2)
        {
            @if(_turnurRoutes!=null && _turnurRoutes.Count() > 0)
            {
                @foreach (var route in _turnurRoutes)
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                        <MudStack Row="true" Spacing="1">
                            <MudText Typo="Typo.body2">@route.DestinationName</MudText>
                            <MudChip T="int" Class="mt-n1" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error )" Size="Size.Small">@route.JumpLength</MudChip> 
                        </MudStack>
                        <MudIconButton Class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>       
                    </MudStack>
                }
            }
        }
        </MudPaper>
    }        
</MudPaper>