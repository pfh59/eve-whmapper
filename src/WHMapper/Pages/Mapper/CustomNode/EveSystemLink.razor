@using Blazor.Diagrams.Components.Renderers
@using System.Globalization

@{
    var result = Link.PathGeneratorResult;
    if (result == null)
        return;

    var d = result.FullPath.ToString();
    var sourcePos = result.SourceMarkerPosition;
    var sourceAng = result.SourceMarkerAngle;
    var targetPos = result.TargetMarkerPosition;
    var targetAng = result.TargetMarkerAngle;
}


    @if(Link.IsRouteWaypoint)
    {
         <path d="@d" fill="none" stroke-width="12" stroke-opacity="0.8" stroke-dasharray="4" stroke="yellow" />
    }

    @if (Link.Selected)
    {
        <path d="@d" fill="none" stroke-width="10" stroke-opacity="0.8" stroke="@WHColorHelper?.GetLinkSelectedColor()" />
    }


    @if (Link.IsEoL)
    {
        <path d="@d" fill="none" stroke-width="8" stroke="@WHColorHelper?.GetLinkEOLColor()"></path>
    }
    else
    {
        <path d="@d" fill="none" stroke-width="8" stroke="@DEFAULT_COLOR"/>
    }

    <path d="@d" fill="none" stroke-width="4" stroke="@WHColorHelper?.GetLinkStatusColor(Link.MassStatus)" />

    <g transform="translate(@sourcePos.X.ToString(CultureInfo.InvariantCulture), @sourcePos.Y.ToString(CultureInfo.InvariantCulture)) rotate(@sourceAng)">
        <path d="@Link.SourceMarker.Path" fill="@DEFAULT_COLOR"/>
    </g>

    <g transform="translate(@targetPos.X.ToString(CultureInfo.InvariantCulture), @targetPos.Y.ToString(CultureInfo.InvariantCulture)) rotate(@targetAng)">
        <path d="@Link.TargetMarker.Path" fill="@DEFAULT_COLOR"/>
    </g>

    @foreach (var label in Link.Labels)
    {
        <LinkLabelRenderer @key="label.Id" Label="@label" Path="@result.FullPath" />
    }
