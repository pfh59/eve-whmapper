@using WHMapper.Models.DTO.EveAPI.Route.Enums;


<MudPaper hidden="@(CurrentSystemNode == null)" Outlined="true" MinWidth="220px">
    <MudStack class="pa-2" Spacing="1">
        <MudStack Row="true" Justify="Justify.FlexStart" Spacing="1">
            <MudText Typo="Typo.subtitle1">Routes :</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add"  Color="Color.Info" Size="Size.Small" OnClick="@((e) => AddRoute())" Disabled="@(_isEditable || _loading)"/>
            <AuthorizeView Policy="Admin" Context="adminContext">
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" OnClick="@((e) => Edit())" Disabled="@(_loading)"/>
                </Authorized>
                <NotAuthorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Small" OnClick="@((e) => Edit())" Disabled="@(((_myRoutes!=null && _myRoutes.Count()>0) || _loading) ? false : true)"/>
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>
        <MudRadioGroup @bind-Value="RType">
            <MudRadio Class="ma-0" T="RouteType" Value="RouteType.Secure" Color="Color.Success" Size="Size.Small">Safer</MudRadio>
            <MudRadio Class="ma-0" T="RouteType" Value="RouteType.Shortest"  Color="Color.Warning" Size="Size.Small">Shorter</MudRadio>
            <!--<MudRadio Class="ma-0" T="RouteType" Value="RouteType.Insecure"  Color="Color.Error" Size="Size.Small">Riskly</MudRadio>-->
        </MudRadioGroup>
            @if(_loading)
            {
                 <MudProgressCircular Class="align-self-center" Color="Color.Secondary" Indeterminate="@_loading" Size="MudBlazor.Size.Medium" />
            }
            else
            {
                @if(_globalRoutes!=null && _globalRoutes.Count() > 0)
                {
                    <MudDivider/>
                    <MudStack Spacing="1">
                        <MudText class="pb-3" Typo="Typo.subtitle2">Default Routes :</MudText>
                        @foreach (var route in _globalRoutes)
                        {
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                                <MudBadge Content="route.RouteLength" Overlap="false" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error)">
                                    <MudText Typo="Typo.body2">@route.DestinationName</MudText>
                                </MudBadge>
                                <MudIconButton class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>
                                <AuthorizeView Policy="Admin" Context="adminContext">
                                @if(_isEditable)
                                {
                                    <MudIconButton class="mt-n1" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@((e) => DelRoute(route))"/>
                                }  
                                </AuthorizeView>
                            </MudStack>
                        }
                    </MudStack>
                }

            @if(_myRoutes!=null && _myRoutes.Count() > 0)
            {
                <MudDivider/>
                <MudStack Spacing="1">
                    <MudText class="pb-3" Typo="Typo.subtitle2">My Routes :</MudText>
                    @foreach (var route in _myRoutes)
                    {
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="1">
                            <MudBadge Content="route.RouteLength" Overlap="false" Color="@(route.IsAvailable==true ? Color.Dark : Color.Error )">
                                <MudText Typo="Typo.body2">@route.DestinationName</MudText>
                            </MudBadge>
                            <MudIconButton class="mt-n1" Icon="@(route.IsShowed ? Icons.Material.Filled.GpsOff : @Icons.Material.Filled.GpsFixed)" Color="@(route.IsShowed ? Color.Error : Color.Success)" Size="Size.Small" Disabled="@(route.IsAvailable==false)" OnClick="@((e)=>ToggleShowRoute(route))"/>
                            @if(_isEditable)
                            {
                                <MudIconButton class="mt-n1" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@((e) => DelRoute(route))"/>
                            }           
                        </MudStack>
                    }
                </MudStack>
            }
        }
        
    </MudStack>
</MudPaper>