@inherits LayoutComponentBase

<MudThemeProvider Theme="_currentTheme" DefaultScrollbar="false"/>
<MudDialogProvider />
<MudSnackbarProvider />

    @if(_loading)
    {
        <MudPaper Class="d-flex align-center justify-center" Height="100vh" Width="100%">
            <MudCard Outlined="true">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Initialization</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Align="Align.Center">EVE Wormhole mapper is downloading a new SDE package.</MudText>
                    <MudText class="py-1" Typo="Typo.body2">@String.Format("{0}, please wait ...",_init_process_msg)
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="@_loading" Size="MudBlazor.Size.Small" />
                    </MudText>
                  
                </MudCardContent>
            </MudCard>
        </MudPaper>
}
    else
    {
        <MudLayout @oncustompaste="HandleCustomPaste" class="overflow-x-hidden">
            <MudAppBar Elevation="1" Dense=true>
                <MudText Typo="Typo.h5" Class="ml-3">Wormhole Mapper</MudText>
                <MudSpacer />
                <AccessControl />
            </MudAppBar>
            <MudMainContent>
                <AuthorizeView>
                    <Authorized>
                        @Body
                    </Authorized>
                </AuthorizeView>
            
            </MudMainContent>
        </MudLayout>
    }
@code
{
    private MudTheme _currentTheme = null!;
    private bool _loading = true;
    private string _init_process_msg = string.Empty;

    [Inject]
    private ISnackbar Snackbar {get;set;} =null!;

    [Inject]
    private IPasteServices PasteServices {get;set;} =null!;

    [Inject]
    private Services.SDE.ISDEServiceManager SDEServices {get;set;} =null!;
    protected override Task OnInitializedAsync()
    {
        _currentTheme = new MudTheme()
        {
            Palette = new PaletteDark()
            {
                Black = "#27272f",
                Background = "#32333d",
                BackgroundGrey = "#27272f",
                Surface = "#373740",
                DrawerBackground = "#27272f",
                DrawerText = "rgba(255,255,255, 0.50)",
                DrawerIcon = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#27272f",
                AppbarText = "rgba(255,255,255, 0.70)",
                TextPrimary = "rgba(255,255,255, 0.70)",
                TextSecondary = "rgba(255,255,255, 0.50)",
                ActionDefault = "#adadb1",
                ActionDisabled = "rgba(255,255,255, 0.26)",
                ActionDisabledBackground = "rgba(255,255,255, 0.12)",
                Primary = "#ffffff",
                PrimaryDarken = "#ffffff",
                PrimaryLighten = "#ffffff"

            }
        };

        if(SDEServices.IsExtractionSuccesful())
        {
            _loading = false;
        }  
        else
        {
            Task.Run(() => DownloadExtractImportSDE());
        }   

        return base.OnInitializedAsync();
    }

    private async Task SetProcessMessage(string message)
    {
        await InvokeAsync(() => {
            _init_process_msg = message;
            StateHasChanged();
        });
    }

    private async Task SetLoading(bool loading)
    {
        await InvokeAsync(() => {
            _loading = loading;
            StateHasChanged();
        });
    }

    private async Task Cleaning()
    {
        await SetProcessMessage("Cleaning ... ");
        await SDEServices.ClearCache();
    }

    private async Task DownloadExtractImportSDE()
    {
       if(await SDEServices.IsNewSDEAvailable())
       {
            await SetProcessMessage("Removing current SDE package (1/4)");
            if (!await SDEServices.ClearSDEResources())
            {
                Snackbar.Add("Removing current SDE package failed", Severity.Error);
                await Cleaning();
                return;
            }

            await SetProcessMessage("Download SDE package (2/4)");
            if(!await SDEServices.DownloadSDE())
            {
                Snackbar.Add("Download SDE package failed.", Severity.Error);
                await Cleaning();
                return;
            }
            
            await SetProcessMessage("Extract SDE package (3/4)");
            if(!await SDEServices.ExtractSDE())
            {
                Snackbar.Add("Extract SDE package failed.", Severity.Error);
                await Cleaning();
                return;
            }

            await SetProcessMessage("Initialize SDE cache (4/4)");
            if(!await SDEServices.BuildCache())
            {
                Snackbar.Add("Initialize SDE cache failed.", Severity.Error);
                await Cleaning();
                return;
            }
        }
        await SetLoading(false);    
    }

    private async Task HandleCustomPaste(CustomPasteEventArgs eventArgs)
    {
        await PasteServices.Paste(eventArgs.PastedData);
    }

}