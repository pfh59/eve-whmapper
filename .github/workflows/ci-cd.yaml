name: CI-CD

on:
  push:
    paths-ignore: ['**.md', '.vscode/**','docs/**','docker/**']
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore: ['**.md', '.vscode/**','docs/**','docker/**']
  
env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Use docker.io for Docker Hub if empty
  REGISTRY_DOCKERHUB: docker.io
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  # Use `latest` as the tag to compare to if empty, assuming that it's already pushed
  COMPARE_TAG: latest

jobs:
  build_test_package:
    runs-on: ubuntu-latest

# Service containers to run with `runner-job`
    services:
      # posgres db service
      postgres:
        # Docker Hub image
        image: postgres:15-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          #POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: whmappertest 
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # redis service
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - name: Setup JDK 11 ðŸ¦´
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 17

      - name: Setup .NET8 ðŸ¦´
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Install SonarCloud scanners
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
      - name: SonarCloud Build and Analyze ðŸš€ ðŸ§ª
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          ConnectionStrings__DatabaseConnection: "server=localhost;port=5432;database=whmappertest;User Id=postgres;"
          ConnectionStrings__RedisConnection: "localhost:6379"
        run: |
          dotnet sonarscanner begin /k:"pfh59_eve-whmapper" /o:"pfh59" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build src/WHMapper -c Release
          dotnet coverage collect "dotnet test src/WHMapper.Tests -c Release" -f xml -o "coverage.xml"
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Generate Artifact
        if: github.event_name != 'pull_request'
        run: | 
          dotnet publish src/WHMapper/WHMapper.csproj -c Release -r linux-x64 --nologo --output ./release/linux
          dotnet publish src/WHMapper/WHMapper.csproj -c Release -r win-x64 --nologo --output ./release/win
          
      - name: Upload Linux Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: WHMapper.linux-x64
          path: |
            /home/runner/work/eve-whmapper/eve-whmapper/release/linux/
            !/home/runner/work/eve-whmapper/eve-whmapper/release/linux/*.pdb
          if-no-files-found: error

      - name: Upload Windows Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: WHMapper.windows-x64
          path: |
            /home/runner/work/eve-whmapper/eve-whmapper/release/win/
            !/home/runner/work/eve-whmapper/eve-whmapper/release/win/*.pdb
          if-no-files-found: error

  build_test_docker_image:
    runs-on: ubuntu-latest
    needs: [build_test_package]
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.SHA }}
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY_DOCKERHUB }}
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short
      
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./src/WHMapper/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Docker Scout
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ env.COMPARE_TAG }}
          ignore-unchanged: true
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }} # to be able to write the comment


  release_docker_image:
    if: github.event_name != 'pull_request'
    needs: [build_test_package,build_test_docker_image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=false

      - name: Build and push ðŸ“‘
        uses: docker/build-push-action@v4
        with:
          context: ./src/WHMapper/
          push: ${{ github.event_name != 'pull_request' }} #PUSH only on merging
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

