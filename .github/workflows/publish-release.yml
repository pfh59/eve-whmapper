name: Publish on release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write
    
env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release_artefacts:
    runs-on: ubuntu-latest
   
    steps:
      - name: Setup .NET8 ðŸ¦´
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: ðŸ“„ Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: ðŸ“¦ Generate Package (linux x64/arm, Windows x64)
        run: |
            dotnet restore src
            dotnet publish src/WHMapper/WHMapper.csproj -c Release -r linux-x64 --nologo --output ./release/linux-x64
            dotnet publish src/WHMapper/WHMapper.csproj -c Release -r linux-arm --nologo --output ./release/linux-arm
            dotnet publish src/WHMapper/WHMapper.csproj -c Release -r win-x64 --nologo --output ./release/win-x64

            zip -r WHMapper.linux-x64.zip ./release/linux-x64 -j
            zip -r WHMapper.linux-arm.zip ./release/linux-arm -j
            zip -r WHMapper.win-x64.zip ./release/win-x64 -j
            gh release upload ${{github.event.release.tag_name}} WHMapper.linux-x64.zip
            gh release upload ${{github.event.release.tag_name}} WHMapper.linux-arm.zip
            gh release upload ${{github.event.release.tag_name}} WHMapper.win-x64.zip
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        shell: bash

  prepare_release_docker_image_docker_io:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV   

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      
          # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
          
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for ${{ env.REGISTRY }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.authors=${{ github.actor }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=false

      - name: Build and push to ${{ env.REGISTRY }} by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./src/WHMapper/
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge_release_docker_image_docker_io:
    needs: [prepare_release_docker_image_docker_io]
    runs-on: ubuntu-latest
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=false
      
      - name: Authenticate to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}          
      
      

