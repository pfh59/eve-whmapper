@using WHMapper.Services.EveOnlineUserInfosProvider
@using Microsoft.AspNetCore.Components.Authorization;
<AuthorizeView>
    <Authorized>
        <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
            <ActivatorContent>
                <MudChip Icon="@Icons.Material.Filled.Person">@_username</MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudNavLink Href="login?redirectUri=/" Target="_blank" ForceLoad="true" Icon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Default">Add Account</MudNavLink>
                @if (isAdmin)
                {
                    <MudNavLink Href="whmapperadmin" Target="_blank" Icon="@Icons.Material.Filled.SettingsAccessibility">Access List</MudNavLink>
                }
                <MudNavLink Href="logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Default">Logout</MudNavLink>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudMenu Dense="true">
            <ActivatorContent>
                <MudChip Icon="@Icons.Material.Filled.Person">Account</MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudNavLink Href="login?redirectUri=/" Icon="@Icons.Material.Filled.Login" IconColor="Color.Default">Login</MudNavLink>
            </ChildContent>
        </MudMenu>
    </NotAuthorized>
</AuthorizeView>



@code
{
    private bool isAdmin = false;
    private string _username = "Anonymous";

    [Inject]
    private IEveUserInfosServices UserService { get; set; } = null!;

    [Inject]
    private IAuthorizationService AuthorizationService { get; set; } = null!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _username = await UserService.GetUserName();

            var user = (await AuthenticationStateTask).User;

            if ((await AuthorizationService.AuthorizeAsync(user, "Admin"))
                .Succeeded)
                isAdmin = true;
            else
                isAdmin = false;

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
